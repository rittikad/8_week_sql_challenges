/* --------------------
   Case Study Questions
   --------------------*/
USE dannys_diner;
-- 1. What is the total amount each customer spent at the restaurant?
SELECT 
    customer_id, SUM(price) AS total_amount
FROM
    sales s
        JOIN
    menu m ON s.product_id = m.product_id
GROUP BY customer_id;

---OUTPUT---


-- 2. How many days has each customer visited the restaurant?
SELECT 
    customer_id, COUNT(DISTINCT order_date) AS customer_visit
FROM
    sales
GROUP BY customer_id;
-- 3. What was the first item from the menu purchased by each customer?
WITH FirstPurchase AS
(
	SELECT 
		customer_id, 
		product_name,
        order_date,
		DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY order_date) AS order_ranking
	FROM
		sales s
			JOIN
		menu m ON s.product_id = m.product_id
)
SELECT
	DISTINCT product_name,
	customer_id, 
    order_date
FROM FirstPurchase
WHERE order_ranking = 1;
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
SELECT 
    product_name, 
    COUNT(s.product_id) AS most_purchased_item
FROM
    sales s
        JOIN
    menu m ON s.product_id = m.product_id
GROUP BY product_name
ORDER BY most_purchased_item DESC
LIMIT 1;
-- 5. Which item was the most popular for each customer?

WITH MostPopularItem AS
(
	SELECT 
		customer_id,
        product_name,
        DENSE_RANK() OVER(PARTITION BY customer_id ORDER BY COUNT(product_name) DESC) AS product_count_ranking
	FROM sales s
	JOIN menu m
	ON s.product_id = m.product_id
    GROUP BY 1,2
)
SELECT 
	customer_id,
	product_name
FROM MostPopularItem
WHERE product_count_ranking = 1;

-- 6. Which item was purchased first by the customer after they became a member?
WITH FirstPurAfterMember AS
(
	SELECT 
		s.customer_id, 
		product_name, 
        order_date,
        join_date,
		DENSE_RANK() OVER
        (
			PARTITION BY s.customer_id 
            ORDER BY join_date, order_date
		) AS purchase_ranking
	FROM sales s
	JOIN members m
	ON s.customer_id = m.customer_id
	JOIN menu mu
	ON s.product_id = mu.product_id
	WHERE order_date >= join_date
)
SELECT 
	*
FROM FirstPurAfterMember;

-- 7. Which item was purchased just before the customer became a member?
WITH LastPurBeforeMember AS
(
	SELECT 
		s.customer_id, 
		product_name, 
        order_date,
        join_date,
		DENSE_RANK() OVER
        (
			PARTITION BY s.customer_id 
            ORDER BY join_date, order_date DESC
		) AS purchase_ranking
	FROM sales s
	JOIN members m
	ON s.customer_id = m.customer_id
	JOIN menu mu
	ON s.product_id = mu.product_id
    WHERE order_date < join_date
)
SELECT 
	customer_id, 
	product_name
FROM LastPurBeforeMember
WHERE purchase_ranking = 1;

-- 8. What is the total items and amount spent for each member before they became a member?
WITH TotalItemAmountBeforeMember AS
(
	SELECT 
		s.customer_id,
        COUNT(*) AS total_items, 
        SUM(price) AS total_amount
	FROM sales s
	JOIN members m
	ON s.customer_id = m.customer_id
	JOIN menu mu
	ON s.product_id = mu.product_id
    WHERE order_date < join_date
    GROUP BY s.customer_id
)
SELECT 
	*
FROM TotalItemAmountBeforeMember;

-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT 
	customer_id,
    SUM(
		CASE
			WHEN product_name = 'Sushi' THEN price * 20 
            ELSE price * 10
		END
	) AS total_points
FROM Sales s
JOIN menu m
ON s.product_id = m.product_id
GROUP BY customer_id;

-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
SELECT 
		s.customer_id,
        SUM(
			CASE 
				WHEN order_date BETWEEN join_date AND DATE_ADD(join_date, INTERVAL 6 DAY) THEN price * 20
                WHEN product_name = 'sushi' THEN price * 20
                ELSE price * 10
			END
			) AS total_points
	FROM sales s
	JOIN members m
	ON s.customer_id = m.customer_id
	JOIN menu mu
	ON s.product_id = mu.product_id
    WHERE DATE_FORMAT(order_date, '%Y-%m-%d') <= '2021-01-31'
    GROUP BY s.customer_id
    ORDER BY s.customer_id;
    
-- BONUS QUESTION
-- The following questions are related creating basic data tables that Danny and his team can use to quickly derive insights without needing to join the underlying tables using SQL.
    SELECT 
		s.customer_id,
        order_date,
        product_name,
        price,
        CASE 
			WHEN order_date >= join_date THEN 'Y'
            ELSE 'N'
		END AS member
	FROM sales s
	LEFT JOIN members m
	ON s.customer_id = m.customer_id
	LEFT JOIN menu mu
	ON s.product_id = mu.product_id
    ORDER BY s.customer_id;
    
 -- Rank All The Things
-- Question : Danny also requires further information about the ranking of customer products, but he purposely does not need the ranking for non-member purchases so he expects null ranking values for the records when customers are not yet part of the loyalty program.   
WITH RankAllThings AS
(
	SELECT 
			s.customer_id,
			order_date,
			product_name,
			price,
			CASE 
				WHEN order_date >= join_date THEN 'Y'
				ELSE 'N'
			END AS member
		FROM sales s
		LEFT JOIN members m
		ON s.customer_id = m.customer_id
		LEFT JOIN menu mu
		ON s.product_id = mu.product_id
		ORDER BY s.customer_id
	),
    RankingAllItems AS
    (
		SELECT 
		*, 
		CASE 
			WHEN member = 'Y' THEN DENSE_RANK() OVER(PARTITION BY s.customer_id, member ORDER BY order_date)
			ELSE NULL
		END AS ranking
		FROM RankAllThings
        
	)
SELECT * FROM RankingAllItems;
